ASP.NET Core 中使用Options

Options 使用了强类型类关联一组设置, 当配置单独存储到一个类, 设计软件有两个重要的原则:

接口隔离原则或者封装：一个类仅依赖于它使用的配置.
关注点分离: 应用的不同部分的设置不应该彼此依赖或相互耦合.
选项还提供验证配置数据的机制

一.绑定分层配置
读取相关配置的首选方式是使用Options. 例如读取下列配置的值:
"Position": {
    "Title": "Editor",
    "Name": "Joe Smith"
  }

创建一个PositionOptions 类：
public class PositionOptions
{
    public const string Position = "Position";

    public string Title { get; set; }
    public string Name { get; set; }
}
一个options类必须满足下面条件：
(1).必须是一个非抽象的类,这个类包含一个公共无参构造函数.
(2).所有公共属性必须可读写.
(3).字段不能绑定,在前面的类中Position不能被绑定.

在下列代码中:
(1).调用ConfigurationBinder.Bind 将Position节点绑定到PositionOptions类.
(2).显示Position 配置的数据.
public class OptionsController : ControllerBase
{
    private readonly ILogger<OptionsController> _logger;

    private readonly IConfiguration Configuration;

    public OptionsController(IConfiguration configuration, ILogger<OptionsController> logger)
    {
        Configuration = configuration;
        _logger = logger;
    }

    [HttpGet]
    public IEnumerable<PositionOptions> Get()
    {
        var positionOptions = new PositionOptions();
        Configuration.GetSection(PositionOptions.Position).Bind(positionOptions);
        var list = new List<PositionOptions>();
        list.Add(positionOptions);
        return list;
    }
}
在前面code, 默认情况下，应用程序启动以后改变配置文件是可以读取到最新的.

ConfigurationBinder.Get<T> 绑定并返回指定的类型。 使用 ConfigurationBinder.Get<T> 
比使用 ConfigurationBinder.Bind 更方便.下面的代码演示如何将 ConfigurationBinder.Get<T> 与 PositionOptions 类配合使用
[HttpGet]
public IEnumerable<PositionOptions> Get()
{
    var positionOptions = new PositionOptions();
    //Configuration.GetSection(PositionOptions.Position).Bind(positionOptions);
    positionOptions = Configuration.GetSection(PositionOptions.Position).Get<PositionOptions>();
    var list = new List<PositionOptions>();
    list.Add(positionOptions);
    return list;
}

另外一种方法是绑定配置文件添加到DI容器里面
public void ConfigureServices(IServiceCollection services)
{
    services.Configure<PositionOptions>(Configuration.GetSection(
                                        PositionOptions.Position));
    services.AddRazorPages();
}
使用下面代码可以读取配置文件
public OptionsController(IConfiguration configuration, IOptions<PositionOptions> options, ILogger<OptionsController> logger)
{
    Configuration = configuration;
    _options = options.Value;
    _logger = logger;
}

Options 接口

IOptions<TOptions>:

不支持
    在应用程序启动之后读取配置.
    命名选项
    以单例模式注册

IOptionsSnapshot<TOptions>:

    在每次请求时应重新计算选项的方案中有用.
    注册为scope, 因此无法在单例模式中使用.
    支持命名选项

IOptionsMonitor<TOptions>:

    用于检索选项并管理 TOptions 实例的选项通知。
    注册为单一实例且可以注入到任何服务生存期。
    支持：
    更改通知
    命名选项
    可重载配置
    选择性选项失效 (IOptionsMonitorCache<TOptions>)

使用 IOptionsSnapshot 读取已更新的数据
IOptionsMonitor 和 IOptionsSnapshot 之间的区别在于：
IOptionsMonitor 是一种单例服务，可随时检索当前选项值，这在单例服务中尤其有用。
IOptionsSnapshot 是一种作用域服务，并在构造 IOptionsSnapshot<T> 对象时提供选项的快照。 
选项快照旨在用于暂时性和有作用域的依赖项.

public void ConfigureServices(IServiceCollection services)
{
    services.AddControllers();
    services.Configure<PositionOptions>(Configuration.GetSection(PositionOptions.Position));
    services.AddSwaggerGen(c =>
    {
        c.SwaggerDoc("v1", new OpenApiInfo { Title = "AspNetCore.Options.Practice", Version = "v1" });
    });
}
//通过构造函数注入
public OptionsController(IConfiguration configuration, IOptionsSnapshot<PositionOptions> options, 
        ILogger<OptionsController> logger)
{
        Configuration = configuration;
        _options = options.Value;
        _logger = logger;
}
IOptionsMonitor
public void ConfigureServices(IServiceCollection services)
{
    services.AddControllers();
    services.Configure<PositionOptions>(Configuration.GetSection(PositionOptions.Position));
    services.AddSwaggerGen(c =>
    {
        c.SwaggerDoc("v1", new OpenApiInfo { Title = "AspNetCore.Options.Practice", Version = "v1" });
    });
}
//通过构造函数注入
public OptionsController(IConfiguration configuration, IOptionsMonitor<PositionOptions> options, 
            ILogger<OptionsController> logger)
        {
            Configuration = configuration;
            _options = options.CurrentValue;
            _logger = logger;
        }


命名选项支持使用 IConfigureNamedOptions

命名选项：
    当多个配置节绑定到同一属性时有用。
    区分大小写
{
  "TopItem": {
    "Month": {
      "Name": "Green Widget",
      "Model": "GW46"
    },
    "Year": {
      "Name": "Orange Gadget",
      "Model": "OG35"
    }
  }
}
下面的类用于每个节，而不是创建两个类来绑定 TopItem:Month 和 TopItem:Year：
public class TopItemSettings
{
    public const string Month = "Month";
    public const string Year = "Year";

    public string Name { get; set; }
    public string Model { get; set; }
}
public void ConfigureServices(IServiceCollection services)
{
    services.Configure<TopItemSettings>(TopItemSettings.Month,
                                       Configuration.GetSection("TopItem:Month"));
    services.Configure<TopItemSettings>(TopItemSettings.Year,
                                        Configuration.GetSection("TopItem:Year"));

    services.AddRazorPages();
}

public OptionsController(IConfiguration configuration, IOptionsMonitor<PositionOptions> options,
            IOptionsSnapshot<TopItemSettings> optionsSnapshot,
            ILogger<OptionsController> logger)
{
    Configuration = configuration;
    _options = options.CurrentValue;
    _monthTopItem = optionsSnapshot.Get(TopItemSettings.Month);
    _yearTopItem = optionsSnapshot.Get(TopItemSettings.Year);
    _logger = logger;
}

选项验证
在AppSetting中添加下面JSON

{
  "MyConfig": {
    "Key1": "My Key One",
    "Key2": 10,
    "Key3": 32
  }
}
下面的代码：
调用 AddOptions 以获取绑定到 MyConfigOptions 类的 OptionsBuilder<TOptions>。
调用 ValidateDataAnnotations 并使用 DataAnnotations来验证
 public void ConfigureServices(IServiceCollection services)
    {
        services.AddOptions<MyConfigOptions>()
            .Bind(Configuration.GetSection(MyConfigOptions.MyConfig))
            .ValidateDataAnnotations();

        services.AddControllersWithViews();
    }
下面的代码使用委托应用更复杂的验证规则：
public void ConfigureServices(IServiceCollection services)
{
    services.AddOptions<MyConfigOptions>()
        .Bind(Configuration.GetSection(MyConfigOptions.MyConfig))
        .ValidateDataAnnotations()
        .Validate(config =>
        {
            if (config.Key2 != 0)
            {
                return config.Key3 > config.Key2;
            }

            return true;
        }, "Key3 must be > than Key2.");   // Failure message.

    services.AddControllersWithViews();
}

用于复杂验证的 IValidateOptions
public class MyConfigValidation : IValidateOptions<MyConfigOptions>
{
    public MyConfigOptions _config { get; private set; }

    public  MyConfigValidation(IConfiguration config)
    {
        _config = config.GetSection(MyConfigOptions.MyConfig)
            .Get<MyConfigOptions>();
    }

    public ValidateOptionsResult Validate(string name, MyConfigOptions options)
    {
        string vor=null;
        var rx = new Regex(@"^[a-zA-Z''-'\s]{1,40}$");
        var match = rx.Match(options.Key1);

        if (string.IsNullOrEmpty(match.Value))
        {
            vor = $"{options.Key1} doesn't match RegEx \n";
        }

        if ( options.Key2 < 0 || options.Key2 > 1000)
        {
            vor = $"{options.Key2} doesn't match Range 0 - 1000 \n";
        }

        if (_config.Key2 != default)
        {
            if(_config.Key3 <= _config.Key2)
            {
                vor +=  "Key3 must be > than Key2.";
            }
        }

        if (vor != null)
        {
            return ValidateOptionsResult.Fail(vor);
        }

        return ValidateOptionsResult.Success;
    }
}
public void ConfigureServices(IServiceCollection services)
{
    services.Configure<MyConfigOptions>(Configuration.GetSection(
                                        MyConfigOptions.MyConfig));
    services.TryAddEnumerable(ServiceDescriptor.Singleton<IValidateOptions
                              <MyConfigOptions>, MyConfigValidation>());
    services.AddControllersWithViews();
}