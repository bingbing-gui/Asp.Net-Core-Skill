1.Startup 是用来配置服务和请求处理管道.
ConfigureServices 主要用来配置应用程序的一些服务,可以在该方法内注册应用程序service,
可以通过DI依赖注入框架和ApplicatioinServices消费这些服务.
Configure 创建应用程序请求处理管道,每个请求中间件在管道中的责任是负责调用下一个中间件,也可以短路,直接跳出，不调用后续中间件.
Starup 类在Host启动时被指定，通过扩展方法WebHostBuilderExtensions.UseStartup<TStartup> 
Host 在创建时,提供了一些应用程序级别基础服务,例如 IWebHostEnvironment,IHostEnvironment,IConfiguration,IApplicationBuilder 

2.创建host的时候可以调用ConfigureServices和Configure
除了在Configure中配置中间件还可以在IStartupFilter的Configure方法配置。
定义如下中间件
public class RequestSetOptionsMiddleware
{
    private readonly RequestDelegate _next;

    public RequestSetOptionsMiddleware( RequestDelegate next )
    {
        _next = next;
    }

    // Test with https://localhost:5001/Privacy/?option=Hello
    public async Task Invoke(HttpContext httpContext)
    {
        var option = httpContext.Request.Query["option"];

        if (!string.IsNullOrWhiteSpace(option))
        {
            httpContext.Items["option"] = WebUtility.HtmlEncode(option);
        }

        await _next(httpContext);
    }
}
3.使用IStartupFilter 配置中间件
不需要显示调用Use{Middleware}在应用程序的开始和结束配置中间件，可以使用IStartupFilter将中间件添加到管道开始，而不需要显示注册.
创建一个管道的配置方法，IStartupFilter.Configure 可以添加中间件到库的前或者后运行.

在IStartupFilter 的Configure 中设置中间件 ，下面代码展示了如何注册IStartupFilter
public class RequestSetOptionsStartupFilter : IStartupFilter
{
    public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)
    {
        return builder =>
        {
            builder.UseMiddleware<RequestSetOptionsMiddleware>();
            next(builder);
        };
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
        .ConfigureAppConfiguration((hostingContext, config) =>
        {
        })
        .ConfigureWebHostDefaults(webBuilder =>
        {
            webBuilder.UseStartup<Startup>();
        })
        .ConfigureServices(services =>
        {
            services.AddTransient<IStartupFilter,
                      RequestSetOptionsStartupFilter>();
        });
}

